print('s')
print('s')
data(AirPassengers)
force(AirPassengers)
# Autocorrelation of AR(1)
rho <- function(k, alpha) alpha^k
layout(1:2)
plot(0:10, rho(0:10, 0.7), type = "b")
plot(0:10, rho(0:10, -0.7), type = "b")
plot(0:10, rho(0:10, 0.7), type = "b")
plot(0:10, rho(0:10, -0.7), type = "b")
set.seed(1)
x<-w<-rnorm(100)
for (t in 2:100) x[t] <- 0.7*x[t-1]+w[t]
plot(x, type="l")
acf(x)
pacf(x)
$$$$
set.seed(1)
x.ar<-ar(x,method = "mle")
x.ar$order
x.ar$ar
x.ar$ar + c(-2,2)*sqrt(x.ar$asy.var)
acf(x)
pacf(x)
x.ar<-ar(x,method = "mle")
x.ar$order
x.ar
x.ar<-ar(x,method = "mle")
x.ar
x.ar<-ar(x)
x.ar
x.ar<-ar(x,method = "mle")
x.ar
x.ar$order
x.ar$ar
x.ar$ar + c(-2,2)*sqrt(x.ar$asy.var)
x.ar$resid
x.ar$order
x.ar$ar
x.ar
x.ar$order
x.ar$ar + c(-2,2)*sqrt(x.ar$asy.var)
#create AR(1)
x
# Find the best param using mle (max likelihood est.)
x.ar<-ar(x,order=(1),method = "mle")
x.ar
# Find the best param using mle (max likelihood est.)
x.ar<-ar(x,order=(2),method = "mle")
x.ar
x.ar
# Find the best param using mle (max likelihood est.)
x.ar<-ar(x,order=(2),method = "mle")
# Find the best param using mle (max likelihood est.)
x.ar<-ar(x,order=2,method = "mle")
x.ar
# Find the best param using mle (max likelihood est.)
x.ar<-ar(x,order=3,method = "mle")
x.ar
# Find the best param using mle (max likelihood est.)
x.ar<-ar(x,order=3,method = "mle",order.max = 3)
x.ar
x.ar$ar
c(-2,2)*sqrt(x.ar$asy.var)
c(-2,2)
sqrt(x.ar$asy.var)
x.ar$resid
resid<-rnorm(99)
for (t in 1:99) resid[t] <- x.ar$resid[t+1]
resid
acf(resid)
acf(x.ar$res[-(1:x.ar$order)])
#Setup
install.packages('gtrends')
library(gtrends)
#Setup
install.packages('gtrends')
#Setup
install.packages('gtrendsr')
#Setup
install.packages('gtrendsR')
library(gtrendsR)
library(tidyverse)
library(lubridate)
get_daily_gtrend <- function(keyword = c('Taylor Swift', 'Kim Kardashian'), geo = 'US', from = '2013-01-01', to = '2019-08-15') {
if (ymd(to) >= floor_date(Sys.Date(), 'month')) {
to <- floor_date(ymd(to), 'month') - days(1)
if (to < from) {
stop("Specifying \'to\' date in the current month is not allowed")
}
}
aggregated_data <- gtrends(keyword = keyword, geo = geo, time = paste(from, to))
if(is.null(aggregated_data$interest_over_time)) {
print('There is no data in Google Trends!')
return()
}
mult_m <- aggregated_data$interest_over_time %>%
mutate(hits = as.integer(ifelse(hits == '<1', '0', hits))) %>%
group_by(month = floor_date(date, 'month'), keyword) %>%
summarise(hits = sum(hits)) %>%
ungroup() %>%
mutate(ym = format(month, '%Y-%m'),
mult = hits / max(hits)) %>%
select(month, ym, keyword, mult) %>%
as_tibble()
pm <- tibble(s = seq(ymd(from), ymd(to), by = 'month'),
e = seq(ymd(from), ymd(to), by = 'month') + months(1) - days(1))
raw_trends_m <- tibble()
for (i in seq(1, nrow(pm), 1)) {
curr <- gtrends(keyword, geo = geo, time = paste(pm$s[i], pm$e[i]))
if(is.null(curr$interest_over_time)) next
print(paste('for', pm$s[i], pm$e[i], 'retrieved', count(curr$interest_over_time), 'days of data (all keywords)'))
raw_trends_m <- rbind(raw_trends_m,
curr$interest_over_time)
}
trend_m <- raw_trends_m %>%
select(date, keyword, hits) %>%
mutate(ym = format(date, '%Y-%m'),
hits = as.integer(ifelse(hits == '<1', '0', hits))) %>%
as_tibble()
trend_res <- trend_m %>%
left_join(mult_m) %>%
mutate(est_hits = hits * mult) %>%
select(date, keyword, est_hits) %>%
as_tibble() %>%
mutate(date = as.Date(date))
return(trend_res)
}
get_daily_gtrend(keyword = c('Taylor Swift', 'Kim Kardashian'), geo = 'US', from = '2013-01-01', to = '2013-09-01')
#Setup
library(forecast);
library(tseries);
library(glue);
setwd("C:/Users/Wallik/Desktop/Sunscreen Trend project")
df <- read.csv('Sunscreen.csv',
header=TRUE)
# Size
nrow(df) # = 156 # 13 years
ncol(df) # = 2
attach(df)
#start=c(2019,1,13); end=c(2021,12,5)
df.ts = ts(Sunscreen..Thailand. ,
start=c(2009,1),freq=12)
plot(df.ts,main ='Monthly "How to suicide" (2009-2021) ')
# yearly mean report
plot(aggregate(df.ts,FUN='mean'),main ='Yearly "How to suicide" (2009-2021) ')
# No seasonality detected (at the July seems to have less)
boxplot(df.ts ~ cycle(df.ts))
# time series
layout(1:3)
df0913=window(df.ts, start=c(2009,1), end=c(2013,12))
df1418=window(df.ts, start=c(2014,1), end=c(2018,12))
df1822=window(df.ts, start=c(2018,1), end=c(2022,12))
plot(df0913,main="Time series of each time periods")
plot(df1418)
plot(df1822)
# Boxplot
layout(1:3)
boxplot(df0913~cycle(df0913),main="2009-2013",ylim = c(0, 100))
boxplot(df1418~cycle(df1418),main="2014-2018",ylim = c(0, 100))
boxplot(df1922~cycle(df1822),main="2018-2022",ylim = c(0, 100))
#                    #                       #
layout(1:2)
Acf(df.ts,main='ACF',lag.max=156/4)
Pacf(df.ts,main='PACF',lag.max=156/4)
plot(df.ts,main ='Monthly "Sunscreen" (2009-2021) ',
xlab="Year",ylab="Popularity",)
#Setup
library(forecast);
library(tseries);
library(glue);
setwd("C:/Users/Wallik/Desktop/Sunscreen Trend project")
df <- read.csv('Sunscreen.csv',
header=TRUE)
# Size
nrow(df) # = 156 # 13 years
ncol(df) # = 2
attach(df)
#start=c(2019,1,13); end=c(2021,12,5)
df.ts = ts(Sunscreen..Thailand. ,
start=c(2009,1),freq=12)
plot(df.ts,main ='Monthly searches "Sunscreen" (2009-2021) ',
xlab="Year",ylab="Popularity",)
# yearly mean report
plot(aggregate(df.ts,FUN='mean'),main ='Yearly searches "Sunscreen" (2009-2021) ',
xlab="Year",ylab="Popularity",)
plot(aggregate(df.ts,FUN='mean'),main ='Annual mean of searches "Sunscreen" (2009-2021) ',
xlab="Year",ylab="Popularity",)
# No seasonality detected (at the July seems to have less)
boxplot(df.ts ~ cycle(df.ts))
# No seasonality detected (at the July seems to have less)
boxplot(df.ts ~ cycle(df.ts)
xlab="Year",ylab="Popularity",)
# No seasonality detected (at the July seems to have less)
boxplot(df.ts ~ cycle(df.ts)
xlab="Year",ylab="Popularity",)
# No seasonality detected (at the July seems to have less)
boxplot(df.ts ~ cycle(df.ts),
xlab="Year",ylab="Popularity",)
boxplot(df.ts ~ cycle(df.ts),main ='Popularity of each month',
xlab="Month",ylab="Popularity",)
layout(1:3)
df0913=window(df.ts, start=c(2009,1), end=c(2013,12))
df1418=window(df.ts, start=c(2014,1), end=c(2018,12))
df1822=window(df.ts, start=c(2018,1), end=c(2022,12))
plot(df0913,main="Time series of each time periods")
plot(df1418)
plot(df1822)
layout(1:3)
boxplot(df0913~cycle(df0913),main="2009-2013",ylim = c(0, 100))
boxplot(df1418~cycle(df1418),main="2014-2018",ylim = c(0, 100))
boxplot(df1922~cycle(df1822),main="2018-2022",ylim = c(0, 100))
boxplot(df1822~cycle(df1822),main="2018-2022",ylim = c(0, 100))
layout(1:2)
Acf(df.ts,main='ACF',lag.max=156/4)
Pacf(df.ts,main='PACF',lag.max=156/4)
adf.test(df.ts) #high p values = not stationary
# Try A. Dickey Fuller
adf.test(df.ts,k = 4) #high p values = not stationary
# Try A. Dickey Fuller
adf.test(df.ts,k = 6)
adf.test(df.ts,k = 5)
adf.test(df.ts,k = 4) #high p values = not stationary
adf.test(df.ts,k = 3)
# 1st & 2nd differencing
layout(1:2)
plot(diff(df.ts,differences = 1),main='1st order differencing')
plot(diff(df.ts,differences = 2),main='2nd order differencing')
layout(1:2)
plot(diff(df.ts,differences = 1),main='1st order differencing')
abline(h=0,lty = 2,col='red')
plot(diff(df.ts,differences = 2),main='2nd order differencing')
abline(h=0,lty = 2,col='red')
layout(1:2)
Acf(df.ts.diff,main='[1st diff] ACF',lag.max=156/4)
Pacf(df.ts.diff,main='[1st diff] PACF',lag.max=156/4)
df.ts.diff = diff(df.ts,differences = 1)
layout(1:2)
Acf(df.ts.diff,main='[1st diff] ACF',lag.max=156/4)
Pacf(df.ts.diff,main='[1st diff] PACF',lag.max=156/4)
auto.arima(df.ts,stationary = FALSE,seasonal=TRUE,ic = 'aic',stepwise = FALSE, trace=TRUE,
approximation = FALSE)
SARIMA.012.210.12 = Arima(df.ts, order = c(0,1,2),
seas = list(order = c(2,1,0), 12))
summary(SARIMA.012.210.12)
Arima(df.ts, order = c(0,1,2),
seas = list(order = c(2,1,0), 12))$aic
Arima(df.ts, order = c(0,1,2),
seas = list(order = c(2,1,1), 12))$aic
df <- read.csv('Sunscreen.csv',
header=TRUE)
df.ts = ts(Sunscreen..Thailand. ,
start=c(2009,1),freq=12)
Arima(df.ts, order = c(0,1,2),
seas = list(order = c(2,1,1), 12))$aic
Arima(df.ts, order = c(0,1,0),
seas = list(order = c(0,1,1), 12))$aic
Arima(df.ts, order = c(0,1,0),
seas = list(order = c(0,1,2), 12))$aic
Arima(df.ts, order = c(0,1,0),
seas = list(order = c(1,1,2), 12))$aic
Arima(df.ts, order = c(0,1,0),seas = list(order = c(1,1,1), 12))$aic
Arima(df.ts, order = c(0,1,0),seas = list(order = c(1,1,2), 12))$aic
Arima(df.ts, order = c(0,1,0),seas = list(order = c(2,1,1), 12))$aic
Arima(df.ts, order = c(0,1,0),seas = list(order = c(2,1,2), 12))$aic
Arima(df.ts, order = c(0,1,2),seas = list(order = c(0,1,2), 12))$aic
Arima(df.ts, order = c(0,1,2),seas = list(order = c(1,1,1), 12))$aic
